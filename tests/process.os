Перем юТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПолучитьПутьКOscript");
	ВсеТесты.Добавить("ТестДолжен_ПрочитатьВыводOscriptСразу");
	ВсеТесты.Добавить("ТестДолжен_ПрочитатьВыводOscriptПострочно");
	ВсеТесты.Добавить("ТестДолжен_ЗаписатьВоВходнойПотокПроцесса");
	ВсеТесты.Добавить("ТестДолжен_НайтиПроцессПоИмени");
	ВсеТесты.Добавить("ТестДолжен_НайтиПроцессПоPID");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ТестДолжен_ПолучитьПутьКOscript() Экспорт
	
	Путь = Новый Файл(КаталогПрограммы() + "\oscript.exe");
	
	юТест.ПроверитьИстину(Путь.Существует());
	
КонецПроцедуры

Процедура ТестДолжен_ПрочитатьВыводOscriptСразу() Экспорт
	
	Путь = КаталогПрограммы() + "\oscript.exe";
	
	Процесс = СоздатьПроцесс("""" + Путь + """",,Истина);
	Процесс.Запустить();
	Поток = Процесс.ПотокВывода;
	
	Стр = НормализоватьПереводыСтрок(Поток.Прочитать());
	
	юТест.ПроверитьРавенство(ШтатныйВыводOscript(), Стр);
	
КонецПроцедуры

Процедура ТестДолжен_ПрочитатьВыводOscriptПострочно() Экспорт
	
	Путь = КаталогПрограммы() + "\oscript.exe";
	
	Процесс = СоздатьПроцесс("""" + Путь + """",,Истина);
	Процесс.Запустить();
	Поток = Процесс.ПотокВывода;
	
	Стр = "";
	Пока Не Процесс.Завершен Цикл
		Пока Поток.ЕстьДанные Цикл
			Стр = Стр + Поток.ПрочитатьСтроку() + "
			|";
		КонецЦикла;
	КонецЦикла;
	
	юТест.ПроверитьРавенство(ШтатныйВыводOscript(), НормализоватьПереводыСтрок(Стр));
	
КонецПроцедуры

Процедура ТестДолжен_ЗаписатьВоВходнойПотокПроцесса() Экспорт

	Процесс = СоздатьПроцесс("sort",,Истина, Истина);
	Процесс.Запустить();
	
	Процесс.ПотокВвода.ЗаписатьСтроку("2");
	Процесс.ПотокВвода.ЗаписатьСтроку("1");
	Процесс.ПотокВвода.ЗаписатьСтроку("3");
	Процесс.ПотокВвода.Закрыть();
	
	Вывод = Процесс.ПотокВывода.Прочитать();
	
	Эталон = НормализоватьПереводыСтрок("1
			 |2
			 |3
			 |");
	
	юТест.ПроверитьРавенство(Эталон, НормализоватьПереводыСтрок(Вывод));

КонецПроцедуры

Процедура ТестДолжен_НайтиПроцессПоИмени() Экспорт
	
	МассивПроцессов = НайтиПроцессыПоИмени("oscript");
	юТест.ПроверитьБольшеИлиРавно(МассивПроцессов.Количество(), 1);
	
КонецПроцедуры

Процедура ТестДолжен_НайтиПроцессПоPID() Экспорт
	
	МассивПроцессов = НайтиПроцессыПоИмени("oscript");
	
	ИД = МассивПроцессов[0].Идентификатор;
	
	Процесс = НайтиПроцессПоИдентификатору(ИД);
	
	юТест.ПроверитьРавенство(Процесс.Идентификатор, ИД);
	
КонецПроцедуры

Функция ШтатныйВыводOscript()
	
	Текст = 
	"1Script Execution Engine. Version 1.0.9.0
	|
	|Usage:
	|
	|I. Script execution: oscript.exe <script_path> [script arguments..]
	|
	|II. Special mode: oscript.exe <mode> <script_path> [script arguments..]
	|Mode can be one of these:
	|  -measure   measures execution time
	|  -compile   shows compiled module without execution
	|
	|III. Build standalone executable: oscript.exe -make <script_path> <output_exe>
	|Builds a standalone executable module based on script specified
	|";
	
	Возврат НормализоватьПереводыСтрок(Текст);
	
КонецФункции

Функция НормализоватьПереводыСтрок(Знач ИсходнаяСтрока)
	Возврат СтрЗаменить(ИсходнаяСтрока, Символы.ВК, "");
КонецФункции
