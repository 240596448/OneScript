Перем юТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПолучитьПутьКOscript");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРазделениеСтрокПриВыводе");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПолучениеСырыхДанныхЗапроса");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ТестДолжен_ПолучитьПутьКOscript() Экспорт
	
	Путь = Новый Файл(ПутьОСкрипт());
	
	юТест.ПроверитьИстину(Путь.Существует());
	
КонецПроцедуры

Функция СтрокаЗапускаОСкрипта(Знач ПутьКИсполняемомуМодулю)

	СИ = Новый СистемнаяИнформация;
	Если Найти(СИ.ВерсияОС, "Windows") > 0 Тогда
		Возврат ПутьКИсполняемомуМодулю;
	КонецЕсли;

	Возврат "mono """ + ПутьКИСполняемомуМодулю + """";

КонецФункции

Функция УникальнаяЧастьИмени(Знач Расширение = "")
	Возврат СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-","") + Расширение;
КонецФункции

Функция ПолучитьВыводДляСкрипта(Знач Путь, Знач ТекстСкрипта, Знач ДанныеЗапроса = "")
	
	Перем ИмяФайла, СтрокаЗапуска;

	ИмяФайлаОСкрипта = КаталогВременныхФайлов() + "/" + УникальнаяЧастьИмени(".os");
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаОСкрипта);
	ЗаписьТекста.Записать(ТекстСкрипта);
	ЗаписьТекста.Закрыть();

	Если Не ПустаяСтрока(ДанныеЗапроса) Тогда

		ИмяФайлаДанныхЗапроса = КаталогВременныхФайлов() + "/" + УникальнаяЧастьИмени(".txt");
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаДанныхЗапроса);
		ЗаписьТекста.Записать(ДанныеЗапроса);
		ЗаписьТекста.Закрыть();

		Ф = Новый Файл(ИмяФайлаДанныхЗапроса);
		РазмерДанныхЗапроса = Строка(Ф.Размер()); // тут надо Формат

	КонецЕсли;

	// НАДО: запуск под Windows

	ИмяФайлаСистемногоСкриптаЗапуска = КаталогВременныхФайлов() + "/" + УникальнаяЧастьИмени(".sh");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСистемногоСкриптаЗапуска);
	ЗаписьТекста.ЗаписатьСтроку("bash -s <<<CALLEOF");
	ЗаписьТекста.ЗаписатьСтроку("SCRIPT_FILENAME=" + ИмяФайлаОСкрипта + " " 
		+ ?(ПустаяСтрока(ДанныеЗапроса), "", " CONTENT_LENGTH=" + РазмерДанныхЗапроса) + " "
		+ СтрокаЗапускаОСкрипта(Путь) + " -cgi"
		+ ?(ПустаяСтрока(ДанныеЗапроса), "", " < " + ИмяФайлаДанныхЗапроса)
	);
	ЗаписьТекста.ЗаписатьСтроку("CALLEOF");
	ЗаписьТекста.Закрыть();

	СтрокаЗапуска = "bash " + ИмяФайлаСистемногоСкриптаЗапуска;

	Процесс = СоздатьПроцесс(СтрокаЗапуска,,Истина);
	Процесс.Запустить();
	Поток = Процесс.ПотокВывода;

	Стр = НормализоватьПереводыСтрок(Поток.Прочитать());

	Возврат Стр;

КонецФункции

Процедура ТестДолжен_ПроверитьРазделениеСтрокПриВыводе() Экспорт
	
	Путь = ПутьОСкрипт();

	ОжидаемыеЗаголовки = 
		"Content-type: text/html
		|Content-encoding: utf-8
		|
		|"
	;
	
	ПроверкаПереводаСтрок = ПолучитьВыводДляСкрипта(Путь,
		"Сообщить(""Строка1""); Сообщить(""Строка2"");"
	);
	
	ОжидаемыйВывод = ОжидаемыеЗаголовки +
		"Строка1
		|Строка2
		|"
	;
	юТест.ПроверитьРавенство(ОжидаемыйВывод, ПроверкаПереводаСтрок);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПолучениеСырыхДанныхЗапроса() Экспорт

	Путь = ПутьОСкрипт();

	ПроверочнаяСтрока = "ПроверочнаяСтрока
		|на несколько строк с невероятным символом " + Символ(12500)
	;
	Данные = ПолучитьВыводДляСкрипта(Путь,
		"ИмяФайла = ПолучитьИмяВременногоФайла(""txt"");
		|ВебЗапрос.RAWDATA.Записать(ИмяФайла);
		|Текст = Новый ТекстовыйДокумент;
		|Текст.Прочитать(ИмяФайла, ""UTF-8"");
		|Сообщить(Текст.ПолучитьТекст());
		|",
		ПроверочнаяСтрока
	);

	ОжидаемыеЗаголовки = 
		"Content-type: text/html
		|Content-encoding: utf-8
		|
		|"
	;

	ПроверочнаяСтрока = ОжидаемыеЗаголовки + ПроверочнаяСтрока;

	Данные = СокрЛП(Данные);
	ПроверочнаяСтрока = СокрЛП(ПроверочнаяСтрока);

	юТест.ПроверитьРавенство(Данные, ПроверочнаяСтрока);

КонецПроцедуры

Функция ПутьОСкрипт()
	Возврат КаталогПрограммы() + "/oscript.exe";
КонецФункции

Функция НормализоватьПереводыСтрок(Знач ИсходнаяСтрока)
	Возврат СтрЗаменить(ИсходнаяСтрока, Символы.ВК, "");
КонецФункции

