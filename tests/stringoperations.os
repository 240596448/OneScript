Перем юТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрНачинаетсяС_НаКириллице");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрНачинаетсяС_НаЛатинице");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрНачинаетсяС_СПустойСтрокойПоиска");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрНачинаетсяС_ПодстрокаНеНайдена");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрНачинаетсяС_ИсходнаяСтрокаНеЗадана");
	
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_НаКириллице");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_НаЛатинице");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_СПустойСтрокойПоиска");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_ПодстрокаНеНайдена");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_ИсходнаяСтрокаНеЗадана");
	
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_НаКириллице");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_НаЛатинице");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_СПустойСтрокойРазделителя");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_РазделениеБезПустых");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрРазделить_ПараметрыНеЗаданы");
	
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрШаблон_БезПараметровДанных");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрШаблон_ИсключениеПриПустомЗнакеПроцента");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрШаблон_ИсключениеПриНомере0");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрШаблон_ИсключениеПриНомереБольше10");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрШаблон_КорректнаяЗамена");
	ВсеТесты.Добавить("ТестДолжен_ВызватьМетод_СтрШаблон_СЭкранированием");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ТестДолжен_ВызватьМетод_СтрНачинаетсяС_НаКириллице() Экспорт
	//arrange	
	//act
	Рез = СтрНачинаетсяС("Проверка", "Пров");
	//assert
	юТест.ПроверитьРавенство(Истина, Рез);
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрНачинаетсяС_НаЛатинице() Экспорт
	//arrange	
	//act
	Рез = StrStartWith("Проверка", "Пров");
	//assert
	юТест.ПроверитьРавенство(Истина, Рез);
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрНачинаетсяС_СПустойСтрокойПоиска() Экспорт
	ТекстОшибки = "";
	//arrange	
	//act
	Попытка
		Рез = СтрНачинаетсяС("Проверка", "");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;	
	//assert
	//Сообщить("[" + ТекстОшибки + "]");
	юТест.ПроверитьРавенство(Истина, 	Найти(ТекстОшибки, "Недопустимое значение параметра") > 0);
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрНачинаетсяС_ПодстрокаНеНайдена() Экспорт
	//arrange	
	//act
	Рез = СтрНачинаетсяС("Проверка", "Тест");
	//assert
	юТест.ПроверитьРавенство(Ложь, Рез);
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрНачинаетсяС_ИсходнаяСтрокаНеЗадана() Экспорт
	ТекстОшибки = "";
	//arrange	
	//act
	Рез = СтрНачинаетсяС(Неопределено, "1");
	//assert
	юТест.ПроверитьРавенство(Ложь, Рез);
КонецПроцедуры	


//------------------------------------------------------------

Процедура ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_НаКириллице() Экспорт
	//arrange	
	//act
	Рез = СтрЗаканчиваетсяНа("Проверка", "верка");
	//assert
	юТест.ПроверитьРавенство(Истина, Рез);
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_НаЛатинице() Экспорт
	//arrange	
	//act
	Рез = StrEndsWith("Проверка", "верка");
	//assert
	юТест.ПроверитьРавенство(Истина, Рез);
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_СПустойСтрокойПоиска() Экспорт
	ТекстОшибки = "";
	//arrange	
	//act
	Попытка
		Рез = СтрЗаканчиваетсяНа("Проверка", "");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;	
	//assert
	юТест.ПроверитьРавенство(Истина, 	Найти(ТекстОшибки, "Недопустимое значение параметра") > 0);
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_ПодстрокаНеНайдена() Экспорт
	//arrange	
	//act
	Рез = СтрЗаканчиваетсяНа("Проверка", "Тест");
	//assert
	юТест.ПроверитьРавенство(Ложь, Рез);
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрЗаканчиваетсяНа_ИсходнаяСтрокаНеЗадана() Экспорт
	//arrange	
	//act
	Рез = СтрЗаканчиваетсяНа(Неопределено, "1");
	//assert
	юТест.ПроверитьРавенство(Ложь, 	Рез);
КонецПроцедуры	

//------------------------------------------------------------

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_НаКириллице() Экспорт
	//arrange	
	//act
	мРезультат = СтрРазделить("0,1,2,3,4,5", ",");
	//assert
	юТест.ПроверитьРавенство(6, мРезультат.Количество());
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_НаЛатинице() Экспорт
	//arrange	
	//act
	мРезультат = StrSplit("0,1,2,3,4,5", ",");
	//assert
	юТест.ПроверитьРавенство(6, мРезультат.Количество());
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_СПустойСтрокойРазделителя() Экспорт
	ТекстОшибки = "";
	//arrange	
	//act
	Попытка
		мРезультат = СтрРазделить("0,1,2,3,4,5", "");
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;	
	//assert
	юТест.ПроверитьРавенство("0,1,2,3,4,5", мРезультат[0]);
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_РазделениеБезПустых() Экспорт
	//arrange	
	//act
		мРезультат = СтрРазделить("0,1,2,,4,5", ",", Ложь);
	//assert
	юТест.ПроверитьРавенство(5, мРезультат.Количество());
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрРазделить_ПараметрыНеЗаданы() Экспорт
	ТекстОшибки = "";
	//arrange	
	//act
	Попытка
		мРезультат = СтрРазделить(Неопределено, Неопределено);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;	
	//assert
	юТест.ПроверитьРавенство(1, мРезультат.Количество());
КонецПроцедуры	

Процедура ТестДолжен_ВызватьМетод_СтрШаблон_БезПараметровДанных() Экспорт
	Шаблон = "%1 %2 %3 %4 %5 %6 %7 %8 %9 %10";
	результат = СтрШаблон(Шаблон);
	юТест.ПроверитьРавенство("         ", результат);
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрШаблон_ИсключениеПриПустомЗнакеПроцента() Экспорт
	
	Попытка
		а = СтрШаблон("тест % тест");
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	
	ВызватьИсключение "Должно было быть выдано исключение";
	
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрШаблон_ИсключениеПриНомере0() Экспорт
	
	Попытка
		а = СтрШаблон("тест %0 тест");
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	
	ВызватьИсключение "Должно было быть выдано исключение";
	
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрШаблон_ИсключениеПриНомереБольше10() Экспорт
	
	Попытка
		а = СтрШаблон("тест %12 тест");
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	
	ВызватьИсключение "Должно было быть выдано исключение";
	
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрШаблон_КорректнаяЗамена() Экспорт
	
	Шаблон = "Привет, %2, я %1!";
	
	Результат = СтрШаблон(Шаблон, "OneScript", "%username%");
	
	юТест.ПроверитьРавенство("Привет, %username%, я OneScript!", Результат);
	
КонецПроцедуры

Процедура ТестДолжен_ВызватьМетод_СтрШаблон_СЭкранированием() Экспорт
	
	Шаблон = "тест %%1 тест";
	
	Результат = СтрШаблон(Шаблон);
	
	юТест.ПроверитьРавенство("тест %1 тест", Результат);
	
КонецПроцедуры
