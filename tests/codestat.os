Перем юТест;

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ПолучитьПутьКOscript");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСтатистикуУсловия_ЕслиИстинаКонецЕсли");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьСтатистикуУсловия_ЕслиЛожьИначеКонецЕсли");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьРаботуЗамераВремени");
	
	Возврат ВсеТесты;
	
КонецФункции

Процедура ТестДолжен_ПолучитьПутьКOscript() Экспорт
	
	Путь = Новый Файл(ПутьОСкрипт());
	
	юТест.ПроверитьИстину(Путь.Существует());
	
КонецПроцедуры

Функция СтрокаЗапускаОСкрипта(Знач ПутьКИсполняемомуМодулю)

	СИ = Новый СистемнаяИнформация;
	Если Найти(СИ.ВерсияОС, "Windows") > 0 Тогда
		Возврат """" + ПутьКИсполняемомуМодулю + """";
	КонецЕсли;

	Возврат "mono """ + ПутьКИСполняемомуМодулю + """";

КонецФункции

Функция ПолучитьВыводДляСкрипта(Знач ТекстСкрипта)

	ИмяФайлаОСкрипта = ПолучитьИмяВременногоФайла("os");

	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаОСкрипта);
	ЗаписьТекста.Записать(ТекстСкрипта);
	ЗаписьТекста.Закрыть();

	ИмяФайлаВывода = ЗапуститьФайлСкрипта(ИмяФайлаОСкрипта);
	Чтение = Новый ЧтениеJson();
	Чтение.ОткрытьФайл(ИмяФайлаВывода);

	Результат = ПрочитатьЗначение(Чтение);
	Чтение.Закрыть();

	УдалитьФайлы(ИмяФайлаВывода);
	
	Возврат Результат;
	
КонецФункции

Функция ЗапуститьФайлСкрипта(Знач ИмяФайлаОСкрипта)
	
	Перем ИмяФайла, СтрокаЗапуска;
	ИмяФайлаВывода = ПолучитьИмяВременногоФайла("txt");

	Путь = СтрокаЗапускаОСкрипта(ПутьОСкрипт());

	СИ = Новый СистемнаяИнформация;
	Если Найти(СИ.ВерсияОС, "Windows") > 0 Тогда
	
		ИмяФайлаСистемногоСкриптаЗапуска = ПолучитьИмяВременногоФайла("cmd");
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСистемногоСкриптаЗапуска, КодировкаТекста.Oem);
		ЗаписьТекста.ЗаписатьСтроку("@echo off");
		
		ЗаписьТекста.ЗаписатьСтроку(Путь + " -codestat=" + ИмяФайлаВывода + " " + ИмяФайлаОСкрипта + " > nul");
		ЗаписьТекста.Закрыть();

		СтрокаЗапуска = ИмяФайлаСистемногоСкриптаЗапуска;

	Иначе
	
		ИмяФайлаСистемногоСкриптаЗапуска = ПолучитьИмяВременногоФайла("sh");
		ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаСистемногоСкриптаЗапуска,,,, Символы.ПС);
		ЗаписьТекста.ЗаписатьСтроку("bash -s <<<CALLEOF");
		ЗаписьТекста.ЗаписатьСтроку("" 
			+ Путь + " -codestat=" + ИмяФайлаВывода
			+ " " + ИмяФайлаОСкрипта
			+ " > /dev/null"
		);
		ЗаписьТекста.ЗаписатьСтроку("CALLEOF");
		ЗаписьТекста.Закрыть();

		СтрокаЗапуска = "bash " + ИмяФайлаСистемногоСкриптаЗапуска;

	КонецЕсли;
	
	Процесс = СоздатьПроцесс(СтрокаЗапуска,,Истина);
	Процесс.Запустить();

	Процесс.ОжидатьЗавершения();
	
	Возврат ИмяФайлаВывода;

КонецФункции

Функция ПрочитатьЗначение(Знач Чтение)

	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение "Неверный JSON";
	КонецЕсли;

	Если Чтение.ТипТекущегоЗначения = ТипЗначенияJson.НачалоОбъекта Тогда

		Результат = Новый Соответствие;
		Пока Истина Цикл

			Если Не Чтение.Прочитать() Тогда
				ВызватьИсключение "Неверный JSON"
			КонецЕсли;

			Если Чтение.ТипТекущегоЗначения = ТипЗначенияJson.КонецОбъекта Тогда
				Прервать;
			КонецЕсли;

			Если Чтение.ТипТекущегоЗначения = ТипЗначенияJson.ИмяСвойства Тогда
				
				ИмяСвойства = Чтение.ТекущееЗначение;
				ЗначениеСвойства = ПрочитатьЗначение(Чтение);
				Результат.Вставить(ИмяСвойства, ЗначениеСвойства);

			КонецЕсли;

		КонецЦикла;

		Возврат Результат;

	ИначеЕсли Чтение.ТипТекущегоЗначения = ТипЗначенияJson.НачалоМассива Тогда

		Результат = Новый Массив;
		// Массивов в выводе быть не должно
		Возврат Результат;

	ИначеЕсли Чтение.ТипТекущегоЗначения = ТипЗначенияJson.Null Тогда
		
		Возврат Null;

	ИначеЕсли Чтение.ТипТекущегоЗначения = ТипЗначенияJson.Ничего Тогда

		Возврат Неопределено;

	ИначеЕсли Чтение.ТипТекущегоЗначения = ТипЗначенияJson.Строка Тогда

		Возврат Чтение.ТекущееЗначение;
		
	ИначеЕсли Чтение.ТипТекущегоЗначения = ТипЗначенияJson.Число Тогда

		Возврат Чтение.ТекущееЗначение;
		
	КонецЕсли 

КонецФункции

Функция ПолучитьДанныеПервогоФайла(Знач Данные)
	
	Для Каждого мКЗ Из Данные Цикл
		
		Возврат мКЗ.Значение;

	КонецЦикла;

КонецФункции

Процедура ТестДолжен_ПроверитьСтатистикуУсловия_ЕслиИстинаКонецЕсли() Экспорт

	ТекстСкрипта = 
		"Если Истина Тогда // 1: 1
		|	Ф = 1;         // 2: 1
		|Иначе             // 3: 0
		|	Ф = 2;         // 4: 0
		|КонецЕсли;        // 5: 1
		|"
	;

	Данные = ПолучитьВыводДляСкрипта(ТекстСкрипта);
	Данные = ПолучитьДанныеПервогоФайла(Данные);

	юТест.ПроверитьРавенство(Данные["$entry"]["1"]["count"], 1);
	юТест.ПроверитьРавенство(Данные["$entry"]["2"]["count"], 1);
	юТест.ПроверитьРавенство(Данные["$entry"]["3"]["count"], 0);
	юТест.ПроверитьРавенство(Данные["$entry"]["4"]["count"], 0);
	юТест.ПроверитьРавенство(Данные["$entry"]["5"]["count"], 1);
	
КонецПроцедуры


Процедура ТестДолжен_ПроверитьСтатистикуУсловия_ЕслиЛожьИначеКонецЕсли() Экспорт

	ТекстСкрипта = 
		"Если Ложь Тогда   // 1: 1
		|	Ф = 1;         // 2: 0
		|Иначе             // 3: 1
		|	Ф = 2;         // 4: 1
		|КонецЕсли;        // 5: 1
		|"
	;

	Данные = ПолучитьВыводДляСкрипта(ТекстСкрипта);
	Данные = ПолучитьДанныеПервогоФайла(Данные);

	юТест.ПроверитьРавенство(Данные["$entry"]["1"]["count"], 1);
	юТест.ПроверитьРавенство(Данные["$entry"]["2"]["count"], 0);
	юТест.ПроверитьРавенство(Данные["$entry"]["3"]["count"], 1);
	юТест.ПроверитьРавенство(Данные["$entry"]["4"]["count"], 1);
	юТест.ПроверитьРавенство(Данные["$entry"]["5"]["count"], 1);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьРаботуЗамераВремени() Экспорт

	ТекстСкрипта = "Sleep(1000);";

	Данные = ПолучитьВыводДляСкрипта(ТекстСкрипта);
	Данные = ПолучитьДанныеПервогоФайла(Данные);

	юТест.ПроверитьБольшеИлиРавно(Данные["$entry"]["1"]["time"], 1000);
	
КонецПроцедуры

Функция ПутьОСкрипт()
	Возврат ОбъединитьПути(КаталогПрограммы(), "oscript.exe");
КонецФункции

Функция НормализоватьПереводыСтрок(Знач ИсходнаяСтрока)
	Возврат СтрЗаменить(ИсходнаяСтрока, Символы.ВК, "");
КонецФункции

