Перем Пути;
Перем НаборТестов;
Перем РезультатТестирования;

Перем Рефлектор;

Перем ЗначенияСостоянияТестов;

Процедура ВыполнитьТесты(МассивПараметров) Экспорт
	Инициализация();
	РезультатТестирования = ЗначенияСостоянияТестов.НеВыполнялся;
	
	Если Не ОбработатьПараметрыЗапуска(МассивПараметров) Тогда
		РезультатТестирования = ЗначенияСостоянияТестов.НеВыполнялся;
	КонецЕсли; 
	
	Сообщить(" ");
	Если РезультатТестирования > ЗначенияСостоянияТестов.Прошел Тогда
		Сообщить("ОШИБКА: Есть непрошедшие тесты. Красная полоса");
	Иначе
		Сообщить("ОК. Зеленая полоса");
	КонецЕсли;
	//ЗавершитьРаботу(РезультатТестирования);
КонецПроцедуры 

Функция ПолучитьРезультатТестирования() Экспорт
	Возврат РезультатТестирования;
КонецФункции

Функция ОбработатьПараметрыЗапуска(МассивПараметров)
	
	Если МассивПараметров.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	путьКТестам = МассивПараметров[0];
	Файл = Новый Файл(путьКТестам);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение "Не найден файл/каталог "+путьКТестам;
	КонецЕсли;
	
	Пути.Добавить(ПутьКТестам);
	
	ЗагрузитьТесты();

	ВыполнитьВсеТесты();
	
	Возврат Истина;
КонецФункции

Процедура ЗагрузитьТесты()
	Для Каждого ПутьТеста Из Пути Цикл
		Файл = Новый Файл(ПутьТеста);
		Если Файл.ЭтоКаталог() Тогда
			ВызватьИсключение "Пока не умею обрабатывать каталоги тестов";
		Иначе
			ПолноеИмяТестовогоСлучая = Файл.ПолноеИмя;
			// ИмяКлассаТеста = Файл.ИмяБезРасширения;
			// ПодключитьСценарий(Файл.ПолноеИмя, ИмяКлассаТеста);
			// Тест = Новый ИмяКлассаТеста;
			ИмяКлассаТеста = "КлассТеста";
			ПодключитьСценарий(Файл.ПолноеИмя, "КлассТеста");
			Тест = Новый КлассТеста();

			МассивТестовыхСлучаев = ПолучитьТестовыеСлучаи(Тест, ПолноеИмяТестовогоСлучая);
			
			Для Каждого ТестовыйСлучай Из МассивТестовыхСлучаев Цикл
				// Если ТипЗнч(ТестовыйСлучай) = Тип("Строка") Тогда
				Если ЭтоСтрока(ТестовыйСлучай) Тогда
					ИмяТестовогоСлучая = ТестовыйСлучай;
					ПараметрыТеста = Неопределено;
					ПредставлениеТеста = ИмяТестовогоСлучая;
				Иначе
					ВызватьИсключение "Не умею обрабатывать описание тестового случая из ПолучитьСписокТестов, отличный от строки"; //TODO
						// ИмяТестовогоСлучая = ТестовыйСлучай.ИмяТеста;
						// параметрыТеста = ТестовыйСлучай;
						// Если НЕ ТестовыйСлучай.Свойство("ПредставлениеТеста", ПредставлениеТеста) или не ЗначениеЗаполнено(ПредставлениеТеста) Тогда
							// ПредставлениеТеста = ИмяТестовогоСлучая;
						// КонецЕсли;
				КонецЕсли;
				
				ОписаниеТеста = Новый Структура;
				ОписаниеТеста.Вставить("ТестОбъект", Тест);
				ОписаниеТеста.Вставить("ИмяКласса", ИмяКлассаТеста);
				ОписаниеТеста.Вставить("ПолноеИмя", ПолноеИмяТестовогоСлучая);
				ОписаниеТеста.Вставить("Параметры", ПараметрыТеста);
				ОписаниеТеста.Вставить("ИмяМетода", ИмяТестовогоСлучая); //"ТестДолжен_ПроверитьВерсию");

				НаборТестов.Добавить(ОписаниеТеста);
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ВыполнитьВсеТесты()
	ПустойМассив = Новый Массив;
	Для Каждого ОписаниеТеста Из НаборТестов Цикл
		//Тест = Новый(ОписаниеТеста.ИмяКласса);
		Тест = ОписаниеТеста.ТестОбъект;
		ИмяМетода = ОписаниеТеста.ИмяМетода;
		
		Сообщить("    Запускаю тест "+ИмяМетода);
		Попытка
			Рефлектор.ВызватьМетод(Тест, ИмяМетода, ПустойМассив);
			
			РезультатТестирования = ЗапомнитьСамоеХудшееСостояние(РезультатТестирования, ЗначенияСостоянияТестов.Прошел);
			Если РезультатТестирования = ЗначенияСостоянияТестов.Прошел Тогда
				Сообщить("    Успешно");
			КонецЕсли;
		Исключение
			текстОшибки = ИнформацияОбОшибке().Описание;
			ВывестиСообщение("ОШИБКА выполнения теста <"+ИмяМетода+">, тест <"+ОписаниеТеста.ИмяКласса+">: "+текстОшибки);
			РезультатТестирования = ЗапомнитьСамоеХудшееСостояние(РезультатТестирования, ЗначенияСостоянияТестов.Сломался);
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьТестовыеСлучаи(ТестОбъект, ПолноеИмяОбъекта)

	Попытка
        
		МассивТестовыхСлучаев = ТестОбъект.ПолучитьСписокТестов(ЭтотОбъект);
		
	Исключение
		текстОшибки = ИнформацияОбОшибке().Описание; //ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ;
		
		// TODO если не использовать переменную ниже, а поставить вызов метода в условие, то будет глюк - внутрь условия не попадаем !
		ЕстьОшибка_МетодОбъектаНеОбнаружен = ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, "ПолучитьСписокТестов");
		Если НЕ ЕстьОшибка_МетодОбъектаНеОбнаружен Тогда
		
			ВывестиОшибку("Набор тестов не загружен: " + ПолноеИмяОбъекта + "
			|	Ошибка получения списка тестовых случаев: " + ОписаниеОшибки());
			
			ТестОбъект = Неопределено;
		КонецЕсли;
		
		Возврат Неопределено;			
				
	КонецПопытки;

	// Если ТипЗнч(МассивТестовыхСлучаев) <> Тип("Массив") Тогда
	Если Строка(МассивТестовыхСлучаев) <> "Object" Тогда
		
			//Если выводитьОшибку Тогда
		ВывестиОшибку("Набор тестов не загружен: " + ПолноеИмяОбъекта + "
		|	Ошибка получения списка тестовых случаев: вместо массива имен тестовых случаев получен объект <" + Строка(МассивТестовыхСлучаев) + ">");
		// |	Ошибка получения списка тестовых случаев: вместо массива имен тестовых случаев получен объект <" + Строка(ТипЗнч(МассивТестовыхСлучаев)) + ">");
			//КонецЕсли;
		ТестОбъект = Неопределено;
		Возврат Неопределено;			
		
	КонецЕсли;
	
	Если НЕ ПроверитьМассивТестовыхСлучаев(МассивТестовыхСлучаев, ТестОбъект, ПолноеИмяОбъекта) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МассивТестовыхСлучаев;
		
КонецФункции

Функция ПроверитьМассивТестовыхСлучаев(МассивТестовыхСлучаев, ТестОбъект, ПолноеИмяОбъекта)
	Для каждого данныеТеста из МассивТестовыхСлучаев Цикл
		// Если ТипЗнч(данныеТеста) = Тип("Строка") Тогда
		Если ЭтоСтрока(данныеТеста) Тогда //Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		// Если ТипЗнч(данныеТеста) <> Тип("Структура") Тогда
		Если Строка(данныеТеста) <> "Object" Тогда
			ВывестиОшибку("Набор тестов не загружен: " + ПолноеИмяОбъекта + "
			|	Ошибка получения структуры описания тестового случая: " + ОписаниеОшибки());
			Возврат Ложь;
		КонецЕсли;
		Если НЕ данныеТеста.Свойство("ИмяТеста") Тогда
			ВывестиОшибку("Набор тестов не загружен: " + ПолноеИмяОбъекта + "
			|	Не задано имя теста в структуре описания тестового случая: " + ОписаниеОшибки());
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ЕстьОшибка_МетодОбъектаНеОбнаружен(текстОшибки, имяМетода)
	Результат = Ложь;
	Если Найти(текстОшибки, "Метод объекта не обнаружен ("+имяМетода+")") > 0 
		ИЛИ Найти(текстОшибки, "Object method not found ("+имяМетода+")") > 0  Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Устанавливает новое текущее состояние выполнения тестов
// в соответствии с приоритетами состояний:
// 		Красное - заменяет все другие состояния
// 		Желтое - заменяет только зеленое состояние
// 		Зеленое - заменяет только серое состояние (тест не выполнялся ни разу).
Функция ЗапомнитьСамоеХудшееСостояние(ТекущееСостояние, НовоеСостояние)
	
	ТекущееСостояние = Макс(ТекущееСостояние, НовоеСостояние);
	Возврат ТекущееСостояние;
	
КонецФункции

Функция Макс(Значение1, Значение2)
	Если Значение1 > Значение2 Тогда
		Возврат Значение1;
	Иначе
		Возврат Значение2;
	КонецЕсли;
КонецФункции

Функция ЭтоСтрока(Значение)
	Возврат Строка(Значение) = Значение;
КонецФункции

Процедура СоздатьСостояниеТестов()
	//{ Состояния тестов - ВАЖЕН порядок заполнения в мЗначенияСостоянияТестов, используется в ЗапомнитьСамоеХудшееСостояние
	ЗначенияСостоянияТестов = Новый Структура;
	ЗначенияСостоянияТестов.Вставить("НеВыполнялся", 0);
	ЗначенияСостоянияТестов.Вставить("Прошел"		, 1);
	ЗначенияСостоянияТестов.Вставить("НеРеализован", 2);
	ЗначенияСостоянияТестов.Вставить("Сломался"	, 3);
	//} Состояния тестов
КонецПроцедуры

// Выводит сообщение. В тестах ВСЕГДА должна использоваться ВМЕСТО метода Сообщить().
// 
Функция ВывестиСообщение(ТекстСообщения) Экспорт	
	
	// Если mMiddleMan <> Неопределено Тогда
		// Если НЕ ОповеститьОСобытии("Message", ТекстСообщения) Тогда
			// ОповеститьОСобытии("ВывестиСообщение", ТекстСообщения);
		// КонецЕсли;
	// Иначе
		// Если ВыводЛогаВФорматеTeamCity Тогда
			// ТекстСообщения = СтрЗаменить(ТекстСообщения,"|","||");
			// ТекстСообщения = СтрЗаменить(ТекстСообщения,"'","|'");
			// ТекстСообщения = СтрЗаменить(ТекстСообщения,"[","|[");
			// ТекстСообщения = СтрЗаменить(ТекстСообщения,"]","|]");
			// ТекстСообщения = СтрЗаменить(ТекстСообщения,Символы.ВК,"|r");
			// ТекстСообщения = СтрЗаменить(ТекстСообщения,Символы.ПС,"|n");		
			
			// Сообщить("##teamcity[message text='"+ТекстСообщения+"' errorDetails='' status='"+мСоответствиеСтатусовДляTeamCity[Статус]+"']");
		// Иначе
			Сообщить(ТекстСообщения);
		// КонецЕсли;
	// КонецЕсли;
	
КонецФункции

// Вызывает исключение с заданным текстом ошибки для прерывания выполнения тестового случая.
// 
Функция ПрерватьТест(ТекстОшибки) Экспорт
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

Функция ВывестиОшибку(Ошибка) Экспорт
	
	НужныйТекстОшибки = Ошибка; //ПолучитьРазвернутыйТекстОшибки(Ошибка);
	
	ВывестиСообщение(НужныйТекстОшибки);

	Возврат НужныйТекстОшибки;
КонецФункции

Процедура Инициализация()
	Пути = Новый Массив;
	НаборТестов = Новый Массив;
	Рефлектор = Новый Рефлектор;

	СоздатьСостояниеТестов();
	РезультатТестирования = ЗначенияСостоянияТестов.НеВыполнялся;
КонецПроцедуры

//ВыполнитьТесты();