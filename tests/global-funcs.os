///////////////////////////////////////////////////////////////////////
//
// Тест проверки поведения некоторых глобальных функций
// 
//
///////////////////////////////////////////////////////////////////////

Перем юТест;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ВидетьБулевоЗаполненным");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПустыеСтрокиДатыЧислаНеопределено");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьНеПустыеСтрокиДатыЧисла");
	ВсеТесты.Добавить("ТестДолжен_РазличатьТекущийИСтартовыйСценарий");
	
	ВсеТесты.Добавить("ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств");
	ВсеТесты.Добавить("ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств_УказаныОтдельныеСвойстваДляЗаполнения");
	ВсеТесты.Добавить("ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств_УказаныСвойстваИсключения");
	ВсеТесты.Добавить("ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств_НесуществующееСвойство");
	ВсеТесты.Добавить("ТестДолжен_Проверить_XMLСтрокаБулево");
	ВсеТесты.Добавить("ТестДолжен_Проверить_XMLСтрокаСтрока");
	ВсеТесты.Добавить("ТестДолжен_Проверить_XMLСтрокаЧисло");
	ВсеТесты.Добавить("ТестДолжен_Проверить_XMLСтрокаДата");
	ВсеТесты.Добавить("ТестДолжен_Проверить_XMLСтрокаДвоичныеДанные");
	ВсеТесты.Добавить("ТестДолжен_Проверить_XMLСтрокаСтрокаИзПеременной");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЗаписьВBase64");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьЧтениеИзBase64");
	
	Возврат ВсеТесты;
КонецФункции

// 
////////////////////////////////////////////////////////////////////

Процедура ТестДолжен_ВидетьБулевоЗаполненным() Экспорт
	юТест.ПроверитьИстину(ЗначениеЗаполнено(Истина), "Проверка для True");
	юТест.ПроверитьИстину(ЗначениеЗаполнено(Ложь), "Проверка для False");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПустыеСтрокиДатыЧислаНеопределено() Экспорт
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(Неопределено), "Проверка для Неопределено");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(""), "Проверка для """"");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(""   ""), "Проверка для ""   """);
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(" " + Символы.ПС + Символы.Таб + "   "), "Проверка для спецсимволов");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено('00010101'), "Проверка для Даты");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(0), "Проверка для 0");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(Новый Массив), "Проверка для коллекции");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНеПустыеСтрокиДатыЧисла() Экспорт
	юТест.ПроверитьИстину(ЗначениеЗаполнено("   Привет   "), "Проверка для строки");
	юТест.ПроверитьИстину(ЗначениеЗаполнено(ТекущаяДата()), "Проверка для Даты");
	юТест.ПроверитьИстину(ЗначениеЗаполнено(1000), "Проверка для Числа");
	М = Новый Массив;
	М.Добавить(1);
	юТест.ПроверитьИстину(ЗначениеЗаполнено(М), "Проверка для Коллекции");
КонецПроцедуры

Процедура ТестДолжен_РазличатьТекущийИСтартовыйСценарий() Экспорт
	
	Стартовый = Новый Файл(СтартовыйСценарий().Источник).Имя;
	Текущий = Новый Файл(ТекущийСценарий().Источник).Имя;
	
	юТест.ПроверитьРавенство(Стартовый, "start.os");
	юТест.ПроверитьРавенство(Текущий, "global-funcs.os");
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств() Экспорт
	
	Источник = Новый Структура("Фамилия,Имя,Отчество", "Иванов", "Иван", "Иванович");
	Приемник = Новый Структура("Фамилия,Имя");
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	юТест.ПроверитьРавенство(Источник.Фамилия, Приемник.Фамилия);
	юТест.ПроверитьРавенство(Источник.Имя, Приемник.Имя);
	юТест.ПроверитьЛожь(Приемник.Свойство("Отчество"));
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств_УказаныОтдельныеСвойстваДляЗаполнения() Экспорт
	
	Источник = Новый Структура("Фамилия,Имя,Отчество", "Иванов", "Иван", "Иванович");
	Приемник = Новый Структура("Фамилия,Имя,Отчество");

	ЗаполнитьЗначенияСвойств(Приемник, Источник, "Фамилия,Имя");
	юТест.ПроверитьРавенство(Источник.Фамилия, Приемник.Фамилия);
	юТест.ПроверитьРавенство(Источник.Имя, Приемник.Имя);
	юТест.ПроверитьРавенство(Неопределено, Приемник.Отчество);
		
КонецПроцедуры

Процедура ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств_УказаныСвойстваИсключения() Экспорт
	
	Источник = Новый Структура("Фамилия,Имя,Отчество", "Иванов", "Иван", "Иванович");
	Приемник = Новый Структура("Фамилия,Имя,Отчество");

	ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Фамилия,Имя");
	юТест.ПроверитьРавенство(Неопределено, Приемник.Фамилия);
	юТест.ПроверитьРавенство(Неопределено, Приемник.Имя);
	юТест.ПроверитьРавенство(Источник.Отчество, Приемник.Отчество);
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств_НесуществующееСвойство() Экспорт
	
	Источник = Новый Структура("Фамилия,Имя,Отчество", "Иванов", "Иван", "Иванович");
	Приемник = Новый Структура("Фамилия,Имя");
	
	Попытка
		ЗаполнитьЗначенияСвойств(Приемник, Источник, "НетТакогоСвойства", "Фамилия,Имя");
	Исключение
		Возврат;
	КонецПопытки;
	
	юТест.ПрерватьТест("Заполнение несуществующего свойства должно выдавать исключение, но не выдало");
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_XMLСтрокаБулево() Экспорт
	
	юТест.ПроверитьРавенство("true", XMLСтрока(Истина));
	юТест.ПроверитьРавенство("false", XMLСтрока(Ложь));
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_XMLСтрокаСтрока() Экспорт
	
	юТест.ПроверитьРавенство("", XMLСтрока(""));
	юТест.ПроверитьРавенство("строка1", XMLСтрока("строка1"));
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_XMLСтрокаСтрокаИзПеременной() Экспорт
	ПеременнаяСтрока = "строка2";
	юТест.ПроверитьРавенство("строка2", XMLСтрока(ПеременнаяСтрока));

	ПеременнаяСтрока = "";
	юТест.ПроверитьРавенство("", XMLСтрока(ПеременнаяСтрока));
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_XMLСтрокаДата() Экспорт
	
	юТест.ПроверитьРавенство("2014-01-01T00:00:00", XMLСтрока('20140101'));
	юТест.ПроверитьРавенство("2014-01-01T12:27:30", XMLСтрока('20140101122730'));
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_XMLСтрокаЧисло() Экспорт
	
	юТест.ПроверитьРавенство("100", XMLСтрока(100));
	юТест.ПроверитьРавенство("200.85", XMLСтрока(200.85));
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_XMLСтрокаДвоичныеДанные() Экспорт
	
	ДДСкрипта = Новый ДвоичныеДанные(ТекущийСценарий().Источник);
	СтрокаДД = XMLСтрока(ДДСкрипта);
	
	юТест.ПроверитьЛожь(ПустаяСтрока(СтрокаДД));
	
КонецПроцедуры

Функция ПрочитатьФайлСкрипта(Знач Файл)
	
	Ч = Новый ЧтениеТекста(Файл);
	Текст = Ч.Прочитать();
	Ч.Закрыть();
	
	Возврат Текст;
	
КонецФункции

Функция ЗаписатьФайлСкрипта()
	ДД = Новый ДвоичныеДанные(ТекущийСценарий().Источник);
	base = Base64Строка(ДД);
	Возврат base;
КонецФункции

Процедура ТестДолжен_ПроверитьЗаписьВBase64() Экспорт

	base = ЗаписатьФайлСкрипта();
	юТест.ПроверитьЛожь(ПустаяСтрока(base));

КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтениеИзBase64() Экспорт

	base = ЗаписатьФайлСкрипта();
	ДД = Base64Значение(base);
	
	ВремФайл = КаталогВременныхФайлов() + "\base64test_temp.os";
	ДД.Записать(ВремФайл);
	
	ТекстИз64 = ПрочитатьФайлСкрипта(ВремФайл);
	ТекстИсходный = ПрочитатьФайлСкрипта(ТекущийСценарий().Источник);
	
	УдалитьФайлы(ВремФайл);
	
	юТест.ПроверитьРавенство(ТекстИсходный, ТекстИз64);
	
КонецПроцедуры