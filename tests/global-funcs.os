///////////////////////////////////////////////////////////////////////
//
// Тест проверки поведения некоторых глобальных функций
// 
//
///////////////////////////////////////////////////////////////////////

Перем юТест;

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Функция Версия() Экспорт
	Возврат "0.1";
КонецФункции

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	ВсеТесты = Новый Массив;
	
	ВсеТесты.Добавить("ТестДолжен_ВидетьБулевоЗаполненным");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьПустыеСтрокиДатыЧислаНеопределено");
	ВсеТесты.Добавить("ТестДолжен_ПроверитьНеПустыеСтрокиДатыЧисла");
	ВсеТесты.Добавить("ТестДолжен_РазличатьТекущийИСтартовыйСценарий");
	ВсеТесты.Добавить("ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств");
	
	Возврат ВсеТесты;
КонецФункции

Процедура ТестДолжен_ВидетьБулевоЗаполненным() Экспорт
	юТест.ПроверитьИстину(ЗначениеЗаполнено(Истина), "Проверка для True");
	юТест.ПроверитьИстину(ЗначениеЗаполнено(Ложь), "Проверка для False");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьПустыеСтрокиДатыЧислаНеопределено() Экспорт
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(Неопределено), "Проверка для Неопределено");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(""), "Проверка для """"");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(""   ""), "Проверка для ""   """);
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(" " + Символы.ПС + Символы.Таб + "   "), "Проверка для спецсимволов");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено('00010101'), "Проверка для Даты");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(0), "Проверка для 0");
	юТест.ПроверитьЛожь(ЗначениеЗаполнено(Новый Массив), "Проверка для коллекции");
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНеПустыеСтрокиДатыЧисла() Экспорт
	юТест.ПроверитьИстину(ЗначениеЗаполнено("   Привет   "), "Проверка для строки");
	юТест.ПроверитьИстину(ЗначениеЗаполнено(ТекущаяДата()), "Проверка для Даты");
	юТест.ПроверитьИстину(ЗначениеЗаполнено(1000), "Проверка для Числа");
	М = Новый Массив;
	М.Добавить(1);
	юТест.ПроверитьИстину(ЗначениеЗаполнено(М), "Проверка для Коллекции");
КонецПроцедуры

Процедура ТестДолжен_РазличатьТекущийИСтартовыйСценарий() Экспорт
	
	Стартовый = Новый Файл(СтартовыйСценарий().Источник).Имя;
	Текущий = Новый Файл(ТекущийСценарий().Источник).Имя;
	
	юТест.ПроверитьРавенство(Стартовый, "start.os");
	юТест.ПроверитьРавенство(Текущий, "global-funcs.os");
	
КонецПроцедуры

Процедура ТестДолжен_Проверить_ЗаполнитьЗначениеСвойств() Экспорт
	
	Источник = Новый Структура("Фамилия,Имя,Отчество", "Иванов", "Иван", "Иванович");
	Приемник = Новый Структура("Фамилия,Имя");
	
	ЗаполнитьЗначенияСвойств(Приемник, Источник);
	юТест.ПроверитьРавенство(Источник.Фамилия, Приемник.Фамилия);
	юТест.ПроверитьРавенство(Источник.Имя, Приемник.Имя);
	юТест.ПроверитьЛожь(Приемник.Свойство("Отчество"));
	
	Приемник = Новый Структура("Фамилия,Имя,Отчество");
	ЗаполнитьЗначенияСвойств(Приемник, Источник, "Фамилия,Имя");
	юТест.ПроверитьРавенство(Источник.Фамилия, Приемник.Фамилия);
	юТест.ПроверитьРавенство(Источник.Имя, Приемник.Имя);
	юТест.ПроверитьРавенство(Неопределено, Приемник.Отчество);
	
	Приемник = Новый Структура("Фамилия,Имя,Отчество");
	ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Фамилия,Имя");
	юТест.ПроверитьРавенство(Неопределено, Приемник.Фамилия);
	юТест.ПроверитьРавенство(Неопределено, Приемник.Имя);
	юТест.ПроверитьРавенство(Источник.Отчество, Приемник.Отчество);
	
	Приемник = Новый Структура("Фамилия,Имя,Отчество");
	Попытка
		ЗаполнитьЗначенияСвойств(Приемник, Источник, "НетТакогоСвойства", "Фамилия,Имя");
	Исключение
		Возврат;
	КонецПопытки;
	
	юТест.ПрерватьТест("Заполнение несуществующего свойства должно выдавать исключение, но не выдало");
	
КонецПроцедуры
