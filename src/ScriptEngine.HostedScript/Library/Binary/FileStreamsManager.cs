
using System;
using ScriptEngine.Machine;
using ScriptEngine.Machine.Contexts;



/// <summary>
/// 
/// Предоставляет методы для использования в типовых сценариях работы с файлами.
/// </summary>
[ContextClass("МенеджерФайловыхПотоков", "FileStreamsManager")]
class FileStreamsManager : AutoContext<FileStreamsManager>
{

public FileStreamsManager()
{
}


/// <summary>
/// 
/// Открывает файл в заданном режиме с возможностью чтения и записи. 
/// Файл открывается в режиме разделяемого чтения.
/// </summary>
///

/// <remarks>
/// 
/// С указанием режима открытия
/// </remarks>
///
/// <param name="NotifyDescription">
/// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
/// 
///  - <ФайловыйПоток> - Файловый поток для файла с заданным именем.
///  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>
/// <param name="OpeningMode">
/// Режим открытия файла. </param>
/// <param name="BufferSize">
/// Размер буфера для операций с файлом. </param>

///

///
[ContextMethod("НачатьОткрытие", "BeginOpen")]
public void BeginOpen( IValue NotifyDescription, IValue OpeningMode, int BufferSize = null)
{
	
}


/// <summary>
/// 
/// Открывает файл в заданном режиме с возможностью чтения и записи. 
/// Файл открывается в режиме разделяемого чтения.
/// </summary>
///

/// <remarks>
/// 
/// С указанием режимов открытия и доступа
/// </remarks>
///
/// <param name="NotifyDescription">
/// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
/// 
///  - <Поток> - Объект типа ФайловыйПоток для файла с указанным именем.
///  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>
/// <param name="OpeningMode">
/// Режим открытия файла. </param>
/// <param name="AccessMode">
/// Режим доступа к файлу. </param>
/// <param name="BufferSize">
/// Размер буфера для операций с файлом. </param>

///

///
[ContextMethod("НачатьОткрытие", "BeginOpen")]
public void BeginOpen( IValue NotifyDescription, IValue OpeningMode, IValue AccessMode, int BufferSize = null)
{
	
}


/// <summary>
/// 
/// Начинает открытие существующего файла для записи. Файл открывается в монопольном режиме. Запись выполняется, начиная с конца файла.
/// Если файл не существует, будет создан новый файл.
/// </summary>
///
/// <param name="NotifyDescription">
/// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
/// 
///  - <Поток> - Объект типа ФайловыйПоток для файла с указанным именем.
///  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>
/// <param name="FileName">
/// Имя открываемого файла. </param>

///

///
[ContextMethod("НачатьОткрытиеДляДописывания", "BeginOpenForAppend")]
public void BeginOpenForAppend( IValue NotifyDescription, string FileName)
{
	
}


/// <summary>
/// 
/// Начинает открытие существующего файла для записи. Если файл не существует, будет создан новый файл. Запись в существующий файл производится с начала файла поверх существующих данных. Файл открывается в монопольном режиме.
/// </summary>
///
/// <param name="Filename">
/// Имя открываемого файла. </param>
/// <param name="NotifyDescription">
/// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
/// 
///  - <Поток> - Объект типа ФайловыйПоток для файла с указанным именем.
///  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>

///

///
[ContextMethod("НачатьОткрытиеДляЗаписи", "BeginOpenForWrite")]
public void BeginOpenForWrite( string Filename, IValue NotifyDescription)
{
	
}


/// <summary>
/// 
/// Начинает открытие существующего файла для чтения с общим доступом на чтение.
/// </summary>
///
/// <param name="NotifyDescription">
/// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
/// 
///  - <Поток> - Объект типа ФайловыйПоток для файла с указанным именем.
///  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>
/// <param name="FileName">
/// Имя открываемого файла. </param>

///

///
[ContextMethod("НачатьОткрытиеДляЧтения", "BeginOpenForRead")]
public void BeginOpenForRead( IValue NotifyDescription, string FileName)
{
	
}


/// <summary>
/// 
/// Начинает создание и перезапись файла и открытие потока с возможностью чтения и записи в файл. Файл открывается в монопольном режиме.
/// </summary>
///
/// <param name="NotifyDescription">
/// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
/// 
///  - <Поток> - Объект типа ФайловыйПоток для файла с указанным именем.
///  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>
/// <param name="FileName">
/// Имя создаваемого файла. </param>
/// <param name="BufferSize">
/// Размер буфера. </param>

///

///
[ContextMethod("НачатьСоздание", "BeginCreate")]
public void BeginCreate( IValue NotifyDescription, string FileName, int BufferSize = null)
{
	
}


/// <summary>
/// 
/// Создает временный файл и открывает его в монопольном режиме с возможностью чтения и записи. Дополнительно можно установить ограничение в байтах, при превышении которого будет создан файл на диске. Пока размер файла не превышает данного ограничения, вся работа выполняется в оперативной памяти.
/// Данный метод удобно использовать в тех случаях, когда требуется работать с данными заранее неизвестного размера, если известно, что в большинстве случаев этот размер ограничен. В таком случае возможно обеспечить, чтобы большую часть времени работа выполнялась в памяти, и при этом не допустить слишком высокого потребления памяти в случае, если размер данных превысит ожидаемый.
/// </summary>
///
/// <param name="NotifyDescription">
/// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
/// 
///  - <Поток> - Объект типа ФайловыйПоток для чтения и запииси созданного временного файла.
///  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>
/// <param name="MemoryLimit">
/// Максимальный объем памяти (в байтах), при превышении которого будет создан файл на диске.
/// Значение по умолчанию: 65535. </param>
/// <param name="BufferSize">
/// Размер буфера для операций с файлом (в байтах).
/// Значение по умолчанию: 8192. </param>

///

///
[ContextMethod("НачатьСозданиеВременногоФайла", "BeginCreateTempFile")]
public void BeginCreateTempFile( IValue NotifyDescription, int MemoryLimit = null, int BufferSize = null)
{
	
}


/// <summary>
/// 
/// Открывает файл в заданном режиме с возможностью чтения и записи. 
/// Файл открывается в режиме разделяемого чтения.
/// </summary>
///

/// <remarks>
/// 
/// С указанием режима открытия
/// </remarks>
///
/// <param name="FileName">
/// Имя открываемого файла. </param>
/// <param name="OpeningMode">
/// Режим открытия файла. </param>
/// <param name="BufferSize">
/// Размер буфера для операций с файлом. </param>

///
/// <returns name="FileStream">
/// Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
/// По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
/// Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
/// Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.</returns>

///
[ContextMethod("Открыть", "Open")]
public IValue Open( string FileName, IValue OpeningMode, int BufferSize = null)
{
	 return null;
}


/// <summary>
/// 
/// Открывает файл в заданном режиме с возможностью чтения и записи. 
/// Файл открывается в режиме разделяемого чтения.
/// </summary>
///

/// <remarks>
/// 
/// С указанием режимов открытия и доступа
/// </remarks>
///
/// <param name="FileName">
/// Имя открываемого файла. </param>
/// <param name="OpeningMode">
/// Режим открытия файла. </param>
/// <param name="AccessMode">
/// Режим доступа к файлу. </param>
/// <param name="BufferSize">
/// Размер буфера для операций с файлом. </param>

///
/// <returns name="FileStream">
/// Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
/// По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
/// Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
/// Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.</returns>

///
[ContextMethod("Открыть", "Open")]
public IValue Open( string FileName, IValue OpeningMode, IValue AccessMode, int BufferSize = null)
{
	 return null;
}


/// <summary>
/// 
/// Открыть существующий файл для записи в конец. Если файл не существует, то будет создан новый файл. Запись в существующий файл выполняется с конца файла. Файл открывается в режиме разделяемого чтения.
/// </summary>
///
/// <param name="FileName">
/// Имя открываемого файла. </param>

///
/// <returns name="FileStream">
/// Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
/// По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
/// Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
/// Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.</returns>

///
[ContextMethod("ОткрытьДляДописывания", "OpenForAppend")]
public IValue OpenForAppend( string FileName)
{
	 return null;
}


/// <summary>
/// 
/// Открывает существующий файл для записи. Файл открывается в режиме разделяемого чтения. Если файл не найден, будет создан новый файл. Запись в существующий файл производится с начала файла, замещая ранее сохраненные данные.
/// </summary>
///
/// <param name="FileName">
/// Имя открываемого файла. </param>

///
/// <returns name="FileStream">
/// Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
/// По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
/// Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
/// Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.</returns>

///
[ContextMethod("ОткрытьДляЗаписи", "OpenForWrite")]
public IValue OpenForWrite( string FileName)
{
	 return null;
}


/// <summary>
/// 
/// Открывает существующий файл для чтения с общим доступом на чтение.
/// </summary>
///
/// <param name="FileName">
/// Имя открываемого файла. </param>

///
/// <returns name="FileStream">
/// Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
/// По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
/// Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
/// Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.</returns>

///
[ContextMethod("ОткрытьДляЧтения", "OpenForRead")]
public IValue OpenForRead( string FileName)
{
	 return null;
}


/// <summary>
/// 
/// Создает или перезаписывает файл и открывает поток с возможностью чтения и записи в файл. Файл открывается в режиме разделяемого чтения.
/// </summary>
///
/// <param name="FileName">
/// Имя создаваемого файла. </param>
/// <param name="BufferSize">
/// Размер буфера. </param>

///
/// <returns name="FileStream">
/// Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
/// По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
/// Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
/// Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.</returns>

///
[ContextMethod("Создать", "Create")]
public IValue Create( string FileName, int BufferSize = null)
{
	 return null;
}


/// <summary>
/// 
/// Создает временный файл и открывает его в монопольном режиме с возможностью чтения и записи. Дополнительно можно установить лимит в байтах, при превышении которого будет создан файл на диске. Пока размер файла не превышает данного лимита - вся работа ведётся в памяти.
/// </summary>
///
/// <param name="MemoryLimit">
/// Максимальный объем памяти (в байтах), при превышении которого будет создан файл на диске.
/// Значение по умолчанию: 65535. </param>
/// <param name="BufferSize">
/// Размер буфера для операций с файлом (в байтах).
/// Значение по умолчанию: 8192. </param>

///
/// <returns name="FileStream">
/// Специализированная версия объекта Поток для работы данными, расположенными в файле на диске. Предоставляет возможность чтения из потока, записи в поток и изменения текущей позиции. 
/// По умолчанию, все операции с файловым потоком являются буферизированными, размер буфера по умолчанию - 8 КБ.
/// Размер буфера можно изменить, в том числе - полностью отключить буферизацию при вызове конструктора. 
/// Следует учитывать, что помимо буферизации существует кэширование чтения и записи файлов в операционной системе, на которое невозможно повлиять программно.</returns>

///
[ContextMethod("СоздатьВременныйФайл", "CreateTempFile")]
public IValue CreateTempFile( int MemoryLimit = null, int BufferSize = null)
{
	 return null;
}

}