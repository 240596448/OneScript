
using System;
using ScriptEngine.Machine;
using ScriptEngine.Machine.Contexts;



/// <summary>
/// 
/// Значение содержит двоичные данные, которые считываются из файла. Значение может быть сохранено в ХранилищеЗначения.
/// Хранимые данные могут быть записаны в файл.
/// </summary>
[ContextClass("ДвоичныеДанные", "BinaryData")]
class BinaryData : AutoContext<BinaryData>
{

    public BinaryData()
    {
    }


    /// <summary>
    /// 
    /// Создает объект и помещает в него двоичные данные, взятые из файла.
    /// В режиме веб-клиента для создания двоичных данных из файла можно использовать метод глобального контекста НачатьСозданиеДвоичныхДанныхИзФайла.
    /// </summary>
    ///
    /// <param name="FileName">
    /// Имя файла, из которого будет загружено значение в виде двоичных данных. </param>

    ///

    [ScriptConstructor]
    public static IRuntimeContextInstance Constructor(string FileName)
    {
        return new BinaryData();
    }

    /// <summary>
    /// 
    /// Записывает двоичные данные в файл или поток.
    /// </summary>
    ///

    /// <remarks>
    /// 
    /// В файл
    /// </remarks>
    ///
    /// <param name="FileName">
    /// Имя файла, в который требуется записать двоичные данные. Если файл не существует, он будет создан. В противном случае, его содержимое будет перезаписано. </param>

    ///

    ///
    [ContextMethod("Записать", "Write")]
    public void Write(string FileName)
    {

    }


    /// <summary>
    /// 
    /// Записывает двоичные данные в файл или поток.
    /// </summary>
    ///

    /// <remarks>
    /// 
    /// Запись в поток
    /// </remarks>
    ///
    /// <param name="Stream">
    /// Поток, в который необходимо записать двоичные данные. </param>

    ///

    ///
    [ContextMethod("Записать", "Write")]
    public void Write(IValue Stream)
    {

    }


    /// <summary>
    /// 
    /// Начинает запись двоичных данных в файл или поток.
    /// </summary>
    ///

    /// <remarks>
    /// 
    /// В файл
    /// </remarks>
    ///
    /// <param name="NotifyDescription">
    /// Содержит описание процедуры, которая будет вызвана после завершения работы метода со следующими параметрами:
    /// 
    ///  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>
    /// <param name="FileName">
    /// Имя файла, в который требуется записать двоичные данные. </param>

    ///

    ///
    [ContextMethod("НачатьЗапись", "BeginWrite")]
    public void BeginWrite(IValue NotifyDescription, string FileName)
    {

    }


    /// <summary>
    /// 
    /// Начинает запись двоичных данных в файл или поток.
    /// </summary>
    ///

    /// <remarks>
    /// 
    /// Запись в поток
    /// </remarks>
    ///
    /// <param name="NotifyDescription">
    /// Содержит описание процедуры, которая будет вызвана после завершения операции со следующими параметрами:
    /// 
    ///  - <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения. </param>
    /// <param name="Stream">
    /// Поток, в который требуется записать двоичные данные. </param>

    ///

    ///
    [ContextMethod("НачатьЗапись", "BeginWrite")]
    public void BeginWrite(IValue NotifyDescription, IValue Stream)
    {

    }


    /// <summary>
    /// 
    /// Открывает поток для чтения двоичных данных.
    /// </summary>
    ///

    ///
    /// <returns name="Stream">
    /// Представляет собой поток данных, который можно последовательно читать и/или в который можно последовательно писать. 
    /// Экземпляры объектов данного типа можно получить с помощью различных методов других объектов.</returns>

    ///
    [ContextMethod("ОткрытьПотокДляЧтения", "OpenStreamForRead")]
    public IValue OpenStreamForRead()
    {
        return null;
    }


    /// <summary>
    /// 
    /// Получает размер двоичных данных в байтах.
    /// </summary>
    ///

    ///
    /// <returns name="Number">
    /// Числовым типом может быть представлено любое десятичное число. Над данными числового типа определены основные арифметические операции: сложение, вычитание, умножение и деление. Максимально допустимая разрядность числа 38 знаков.</returns>

    ///
    [ContextMethod("Размер", "Size")]
    public int Size()
    {
        return null;
    }

}