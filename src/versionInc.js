function modifiedToday(dateArg){	var fileDate = new Date(dateArg);	fileDate.setHours(0,0,0,0);	var now = new Date();	now.setHours(0,0,0,0);		return fileDate.toString() === now.toString();}function processToken(value, token){	if(token == "+")	{		n = Number(value)+1;		return ""+n;	}	if(token == "*")	{		return value;	}	else	{		return token;	}}objArgs = WScript.Arguments;if(objArgs.length != 2){	WScript.Echo("wrong arguments");	WScript.Quit(-1);}var fileToProcess = objArgs(0);var mask = objArgs(1);var WshShell = WScript.CreateObject ("WScript.Shell");var re = /assembly: (Assembly\w+\(")(\d+)\.(\d+)\.(\d+)\.(\d+)"\)/gvar maskRe = /(\d+|\+|\*)\.(\d+|\+|\*)\.(\d+|\+|\*)\.(\d+|\+|\*)/var maskMajor;var maskMinor;var maskRelease;var maskBuild;maskRe.exec(mask);maskMajor = RegExp.$1;maskMinor = RegExp.$2;maskRelease = RegExp.$3;maskBuild = RegExp.$4;var fso = WScript.CreateObject("Scripting.FileSystemObject");var file = fso.GetFile(fileToProcess);if(modifiedToday(file.DateLastModified)){	WScript.Quit(0);}file = file.OpenAsTextStream(1,-2);var content = file.ReadAll();file.Close();result = re.exec(content);var major;var minor;var release;var build;var newContent;while (result != null){	 major = processToken(RegExp.$2,maskMajor);	 minor = processToken(RegExp.$3,maskMinor);	 release = processToken(RegExp.$4,maskRelease);	 build = processToken(RegExp.$5,maskBuild);	 	 newContent = content.replace(re, "assembly: $1" + major + "." + minor + "." + release + "." + build+"\")");	 	 result = re.exec(content);}stream = fso.CreateTextFile(fileToProcess, true);stream.Write(newContent);stream.Close();WScript.Echo("Version processed");